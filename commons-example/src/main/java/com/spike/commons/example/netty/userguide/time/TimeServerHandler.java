package com.spike.commons.example.netty.userguide.time;

import org.apache.log4j.Logger;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;

/**
 * TimeServer handler<br>
 * responsibility: handle IO events generated by Netty
 * @see TimeServer
 */
public class TimeServerHandler extends ChannelInboundHandlerAdapter {

  private static final Logger LOG = Logger.getLogger(TimeServerHandler.class);

  /**
   * <pre>
   * send message without receiving any requests, close connection once message is sent
   * 在未接收到消息前发送消息，一旦消息发送关闭连接
   * 
   * 连接一旦建立时触发
   * 
   * ENTER A LIFE WITHOUT flip() in Java NIO
   * </pre>
   */
  @Override
  public void channelActive(final ChannelHandlerContext context) throws Exception {

    // 为32位整数分配4字节的ByteBuf
    // ByteBuf有两个指针：读操作指针、写操作指针
    ByteBuf bb = context.alloc().buffer(4);

    bb.writeInt((int) (System.currentTimeMillis() / 1000L + 2208988800L));

    // ChannelFuture表示IO操作还没有发生，因为Netty的异步约束
    LOG.debug("连接建立时，写入当前时间...");
    final ChannelFuture channelFuture = context.writeAndFlush(bb);

    channelFuture.addListener(new ChannelFutureListener() {
      @Override
      public void operationComplete(ChannelFuture future) throws Exception {
        LOG.debug("写操作完成");
        assert channelFuture == future;

        // IO操作完成时异步的关闭连接
        LOG.debug("关闭连接...");
        context.close();
      }
    });
    // 或者使用预定义的listener
    // channelFuture.addListener(ChannelFutureListener.CLOSE);
  }

  /**
   * <pre>
   * occurs when exception raised by Netty due to IO error, or
   * due to handler's operation when processing events
   * 
   * 在Netty抛出IO异常或者handler处理事件操作中抛出异常时触发
   * 
   * </pre>
   */
  @Override
  public void exceptionCaught(ChannelHandlerContext context, Throwable cause) {
    // 记录日志
    if (cause != null) {
      // cause.printStackTrace();
      LOG.error(cause);
    }

    // 关闭channel
    LOG.info("关闭链接...");
    context.close();

    // 其他处理方式：根据异常类型处理，在关闭连接前发送响应消息等
  }
}
